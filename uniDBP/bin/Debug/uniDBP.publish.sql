/*
Deployment script for uniDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "uniDB"
:setvar DefaultFilePrefix "uniDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Departaments]...';


GO
CREATE TABLE [dbo].[Departaments] (
    [Id]   INT            IDENTITY (1, 1) NOT NULL,
    [name] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[DepartamentsInFacultet]...';


GO
CREATE TABLE [dbo].[DepartamentsInFacultet] (
    [Id]             INT IDENTITY (1, 1) NOT NULL,
    [facultet_id]    INT NULL,
    [departament_id] INT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Facultets]...';


GO
CREATE TABLE [dbo].[Facultets] (
    [Id]   INT            IDENTITY (1, 1) NOT NULL,
    [name] NVARCHAR (MAX) NOT NULL,
    [note] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Groups]...';


GO
CREATE TABLE [dbo].[Groups] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (50) NOT NULL,
    [facultet_id] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Students]...';


GO
CREATE TABLE [dbo].[Students] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [firstName]         NVARCHAR (50)  NOT NULL,
    [lastName]          NVARCHAR (50)  NOT NULL,
    [group_id]          INT            NULL,
    [registrtationData] DATETIME       NULL,
    [avgMark]           DECIMAL (4, 1) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[DepartamentsInFacultet]...';


GO
ALTER TABLE [dbo].[DepartamentsInFacultet]
    ADD FOREIGN KEY ([facultet_id]) REFERENCES [dbo].[Facultets] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[DepartamentsInFacultet]...';


GO
ALTER TABLE [dbo].[DepartamentsInFacultet]
    ADD FOREIGN KEY ([departament_id]) REFERENCES [dbo].[Departaments] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Groups]...';


GO
ALTER TABLE [dbo].[Groups]
    ADD FOREIGN KEY ([facultet_id]) REFERENCES [dbo].[Facultets] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Students]...';


GO
ALTER TABLE [dbo].[Students]
    ADD FOREIGN KEY ([group_id]) REFERENCES [dbo].[Groups] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Procedure [dbo].[spDepartaments_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spDepartaments_GetAll]

AS
	select Id, name
	from [dbo].[Departaments]
GO
PRINT N'Creating Procedure [dbo].[spDepartaments_GetById]...';


GO
CREATE PROCEDURE [dbo].[spDepartaments_GetById]
	@departament_id int
AS
	select Id, name
	from [dbo].[Departaments]
	where id = @departament_id
GO
PRINT N'Creating Procedure [dbo].[spDepartaments_Update]...';


GO
CREATE PROCEDURE [dbo].[spDepartaments_Update]
	@Id int,
	@name nvarchar(MAX)
AS
	update [dbo].[Departaments]
	set 
	name = @name
	where Id = @Id
GO
PRINT N'Creating Procedure [dbo].[spDepartamentsInFacultet_Delete]...';


GO
CREATE PROCEDURE [dbo].[spDepartamentsInFacultet_Delete]
	@departament_id int,
	@facultet_id int
AS
	delete from [dbo].[DepartamentsInFacultet]
	where departament_id = @departament_id 
	and facultet_id = @facultet_id;
GO
PRINT N'Creating Procedure [dbo].[spDepartamentsInFacultet_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spDepartamentsInFacultet_GetAll]

AS
	SELECT facultet_id, departament_id
	from [dbo].[DepartamentsInFacultet]
GO
PRINT N'Creating Procedure [dbo].[spDepartamentsInFacultet_Insert]...';


GO
CREATE PROCEDURE [dbo].[spDepartamentsInFacultet_Insert]
	@facultet_id int,
	@departament_id int

AS
	insert into [dbo].[DepartamentsInFacultet]
	values (@facultet_id, @departament_id)
GO
PRINT N'Creating Procedure [dbo].[spDepartamentsInFacultet_Update]...';


GO
CREATE PROCEDURE [dbo].[spDepartamentsInFacultet_Update]
	@facultet_id int,
	@departament_id int,
	@departamentForUpdatte int
AS
	update [dbo].[DepartamentsInFacultet]
	set departament_id = @departamentForUpdatte
	where departament_id = @departament_id 
	and facultet_id = @facultet_id;
GO
PRINT N'Creating Procedure [dbo].[spFacultets_Delete]...';


GO
CREATE PROCEDURE [dbo].[spFacultets_Delete]
	@FacultetId int
AS
	delete
	from [dbo].[Facultets]
	where id = @FacultetId
GO
PRINT N'Creating Procedure [dbo].[spFacultets_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spFacultets_GetAll]
AS
	SELECT Id, name, note 
	from [dbo].[Facultets]
GO
PRINT N'Creating Procedure [dbo].[spFacultets_GetById]...';


GO
CREATE PROCEDURE [dbo].[spFacultets_GetById]
	@FacultetId int
AS
	SELECT Id, name, note 
	from [dbo].[Facultets]
	where id = @FacultetId
GO
PRINT N'Creating Procedure [dbo].[spFacultets_Insert]...';


GO
CREATE PROCEDURE [dbo].[spFacultets_Insert]
	@name NVARCHAR(50),
	@note NVARCHAR(MAX)
AS
	insert  into
	[dbo].[Facultets]
	values(@name, @note)
GO
PRINT N'Creating Procedure [dbo].[spFacultets_Update]...';


GO
CREATE PROCEDURE [dbo].[spFacultets_Update]
	@Facultet_id int,
	@name NVARCHAR(50),
	@note NVARCHAR(MAX)
AS
	update
	[dbo].[Facultets]
	set 
	name = @name, 
	note = @note
	where id = @Facultet_id
GO
PRINT N'Creating Procedure [dbo].[spGroups_Delete]...';


GO
CREATE PROCEDURE [dbo].[spGroups_Delete]
	@group_id int
AS
	delete
	from [dbo].[Groups]
	where id = @group_id
GO
PRINT N'Creating Procedure [dbo].[spGroups_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spGroups_GetAll]

AS
	SELECT Id, name, facultet_id
	from [dbo].[Groups]
GO
PRINT N'Creating Procedure [dbo].[spGroups_GetById]...';


GO
CREATE PROCEDURE [dbo].[spGroups_GetById]
	@group_id int
AS
	SELECT Id, name, facultet_id
	from [dbo].[Groups]
	where id = @group_id
GO
PRINT N'Creating Procedure [dbo].[spGroups_Insert]...';


GO
CREATE PROCEDURE [dbo].[spGroups_Insert]
	@name NVARCHAR(50),
	@facultet_id  int
AS
	insert into [dbo].[Groups]
	values(@name, @facultet_id)
GO
PRINT N'Creating Procedure [dbo].[spGroups_Update]...';


GO
CREATE PROCEDURE [dbo].[spGroups_Update]
	@group_id int,
	@name NVARCHAR(50),
	@facultet_id  int
AS
	update [dbo].[Groups]
	set name = @name,
	facultet_id = @facultet_id
	where id = @group_id
GO
PRINT N'Creating Procedure [dbo].[spStudents_Delete]...';


GO
CREATE PROCEDURE [dbo].[spStudents_Delete]
	@student_id int
AS
	delete
	from [dbo].[Students]
	where id = @student_id
GO
PRINT N'Creating Procedure [dbo].[spStudents_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spStudents_GetAll]

AS
	select Id, firstName, lastName, group_id, registrtationData, avgMark
	from [dbo].[Students]
GO
PRINT N'Creating Procedure [dbo].[spStudents_GetById]...';


GO
CREATE PROCEDURE [dbo].[spStudents_GetById]
	@student_id int
AS
	select Id, firstName, lastName, group_id, registrtationData, avgMark
	from [dbo].[Students]
	where id = @student_id
GO
PRINT N'Creating Procedure [dbo].[spStudents_Insert]...';


GO
CREATE PROCEDURE [dbo].[spStudents_Insert]
	@firstName NVARCHAR(50),
	@lastName NVARCHAR(50),
	@group_id int,
	@avgMark int
AS
	insert  into
	[dbo].[Students]
	values(
	@firstName,
	@lastName,
	@group_id,
	GETDATE(),
	@avgMark
	)
GO
PRINT N'Creating Procedure [dbo].[spStudents_Update]...';


GO
CREATE PROCEDURE [dbo].[spStudents_Update]
	@student_id int,
	@firstName NVARCHAR(50),
	@lastName NVARCHAR(50),
	@group_id int,
	@avgMark int
AS
	update
	[dbo].[Students]
	set
	firstName  = @firstName,
	lastName = @lastName,
	group_id = @group_id,
	avgMark = @avgMark
	where 
	id = @student_id
GO

if (exists(select 1 from [dbo].[Departaments]))
delete from [dbo].[Departaments]

if (exists(select 1 from [dbo].[DepartamentsInFacultet]))
delete from [dbo].[DepartamentsInFacultet]

if (exists(select 1 from [dbo].[Facultets]))
delete from [dbo].[Facultets]

if (exists(select 1 from [dbo].[Groups]))
delete from [dbo].[Groups]

if (exists(select 1 from [dbo].[Students]))
delete from [dbo].[Students]


DECLARE @cnt INT = 0;

WHILE @cnt < 10
BEGIN
   insert into [dbo].[Departaments](name)
   values(CONCAT('departament',@cnt))
   SET @cnt = @cnt + 1;
END;
insert into [dbo].[Departaments](name)
   values('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ac placerat vestibulum lectus mauris ultrices eros. Suscipit tellus mauris a diam. Semper eget duis at tellus at. Placerat in egestas erat imperdiet. A cras semper auctor neque vitae tempus quam. Sit amet justo donec enim diam vulputate. Ornare lectus sit amet est placerat in egestas erat. Fringilla est ullamcorper eget nulla facilisi etiam dignissim. Vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt. Elit sed vulputate mi sit amet mauris commodo. Porta lorem mollis aliquam ut porttitor. Tellus cras adipiscing enim eu turpis. Quis eleifend quam adipiscing vitae proin sagittis nisl. Non consectetur a erat nam. Risus sed vulputate odio ut enim blandit volutpat maecenas volutpat. Lorem donec massa sapien faucibus.')

SET @cnt = 0;
WHILE @cnt < 5
BEGIN
   insert into [dbo].[Facultets]
   (name, note)
   values((CONCAT('facultetName',@cnt)), (CONCAT('note',@cnt)))
   SET @cnt = @cnt + 1;
END;
   insert into [dbo].[Facultets]
   (name, note)
   values(
   'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ac placerat vestibulum lectus mauris ultrices eros. Suscipit tellus mauris a diam. Semper eget duis at tellus at. Placerat in egestas erat imperdiet. A cras semper auctor neque vitae tempus quam. Sit amet justo donec enim diam vulputate. Ornare lectus sit amet est placerat in egestas erat. Fringilla est ullamcorper eget nulla facilisi etiam dignissim. Vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt. Elit sed vulputate mi sit amet mauris commodo. Porta lorem mollis aliquam ut porttitor. Tellus cras adipiscing enim eu turpis. Quis eleifend quam adipiscing vitae proin sagittis nisl. Non consectetur a erat nam. Risus sed vulputate odio ut enim blandit volutpat maecenas volutpat. Lorem donec massa sapien faucibus.',
   'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ac placerat vestibulum lectus mauris ultrices eros. Suscipit tellus mauris a diam. Semper eget duis at tellus at. Placerat in egestas erat imperdiet. A cras semper auctor neque vitae tempus quam. Sit amet justo donec enim diam vulputate. Ornare lectus sit amet est placerat in egestas erat. Fringilla est ullamcorper eget nulla facilisi etiam dignissim. Vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt. Elit sed vulputate mi sit amet mauris commodo. Porta lorem mollis aliquam ut porttitor. Tellus cras adipiscing enim eu turpis. Quis eleifend quam adipiscing vitae proin sagittis nisl. Non consectetur a erat nam. Risus sed vulputate odio ut enim blandit volutpat maecenas volutpat. Lorem donec massa sapien faucibus.'
   )

SET @cnt = 0;
WHILE @cnt < 10
BEGIN
   insert into [dbo].[DepartamentsInFacultet]
   (departament_id, facultet_id)
   values(FLOOR(RAND()*(10)+1), FLOOR(RAND()*(5)+1))
   SET @cnt = @cnt + 1;
END;

SET @cnt = 0;
WHILE @cnt < 15
BEGIN
   insert into [dbo].[Groups]
   (name, facultet_id)
   values((CONCAT('groupsName',@cnt)), FLOOR(RAND()*(5)+1))
   SET @cnt = @cnt + 1;
END;

SET @cnt = 0;
WHILE @cnt < 50
BEGIN
   insert into [dbo].[Students]
   (firstName, lastName, group_id, registrtationData, avgMark)
   values((CONCAT('firstName',@cnt)), (CONCAT('LastName',@cnt)), FLOOR(RAND()*(15)+1), GETDATE(), CAST((RAND()*(10)+1) AS decimal(4,1)))
   SET @cnt = @cnt + 1;
END;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
